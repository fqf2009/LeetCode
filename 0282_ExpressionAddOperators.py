# Given a string num that contains only digits and an integer target,
# return all possibilities to insert the binary operators '+', '-',
# and/or '*' between the digits of num so that the resultant expression
# evaluates to the target value.
# Note that operands in the returned expressions should not contain
# leading zeros.
# Constraints:
#   1 <= num.length <= 10
#   num consists of only digits.
#   -2^31 <= target <= 2^31 - 1
from typing import List


# Backtrack: O(4^N)
# Analysis:
# - at any position i (0, n-1), there are 4 options:
#   - no op, i.e., let this digit contact with previous digit
#   - insert a '+'
#   - insert a '-'
#   - insert a '*'
# - The problem is how to eval the expression on the go:
#   e.g.: 1 - 2  +  36  -  4  *  5  5 - 8
#       eval     op1     oper    op2     expr           Note
#       0        0       +       1       1
#       0        1       +      -2       1-2            eval += op1; op1 = op2; op2 = new_op
#       1       -2       +       3       1-2+3
#       1       -2       +      36       1-2+36
#      -1       36       +      -4       1-2+36-4
#      35       -4       *       5       1-2+36-4*5     eval += op1; op1 = op2; ; op2 = new_op
#      35       -4       *      55       1-2+36-4*55
#      35     -220       +      -8       1-2+36-4*55-8  op1 *= op2; op2 = new_op
class Solution:
    def addOperators(self, num: str, target: int) -> List[str]:
        res = []

        def backtrack(pos: int, eval: int, op1: int, op2: int, oper: str, expr: str):
            # print(f"eval={eval:10}  op1={op1:10}  oper={oper:^3}  op2={op2:10}  expr={expr:30}")
            if pos == len(num):
                if ((oper == "*" and eval + op1 * op2 == target) or
                    (oper == "+" and eval + op1 + op2 == target)):
                    res.append(expr)
                return

            if op2 != 0:  # operand should not have leading '0'
                sign = 1 if op2 > 0 else -1
                backtrack(pos + 1, eval, op1, op2 * 10 + sign*int(num[pos]), 
                          oper, expr + num[pos])

            if oper == "*":
                op1 *= op2
            else:
                eval += op1
                op1 = op2

            backtrack(pos + 1, eval, op1, int(num[pos]), "+", expr + "+" + num[pos])
            backtrack(pos + 1, eval, op1, -int(num[pos]), "+", expr + "-" + num[pos])
            backtrack(pos + 1, eval, op1, int(num[pos]), "*", expr + "*" + num[pos])

        backtrack(1, 0, 0, int(num[0]), "+", num[0])
        return res


if __name__ == "__main__":

    def unit_test(sol):
        r = sol.addOperators("123", target=6)
        print(r)
        assert sorted(r) == sorted(["1*2*3", "1+2+3"])

        r = sol.addOperators("232", target=8)
        print(r)
        assert sorted(r) == sorted(["2*3+2", "2+3*2"])

        r = sol.addOperators("3456237490", target=9191)
        print(r)
        assert sorted(r) == sorted([])

        r = sol.addOperators("123456789", 45)
        expected = ['12+34-5-6-7+8+9', '12+3+4-56-7+89', '12+3-45+6+78-9', '12+3-4*5+67-8-9', '12+3*45-6-7-89',
                    '12+3*4+5+6-7+8+9', '12-3+4+56-7-8-9', '12-3+4*5+6-7+8+9', '12-3-45-6+78+9', '12-3-4+5*6-7+8+9', 
                    '12-3-4-56+7+89', '12-3*4-5+67-8-9', '12-3*4*5+6+78+9', '12*3+4+5+6-7-8+9', '12*3+4+5-6+7+8-9', 
                    '12*3-4-56+78-9', '12*3-4-5-6+7+8+9', '12*3*4-5*6-78+9', '1+23+4+5+6+7+8-9', '1+23+4-5-67+89', 
                    '1+23+4-5*6+7*8-9', '1+23-45+67+8-9', '1+23-4-5+6+7+8+9', '1+23-4-5-6*7+8*9', '1+23-4*5+6*7+8-9', 
                    '1+23-4*5-6+7*8-9', '1+23*4+5-6-7*8+9', '1+23*4-56+7-8+9', '1+23*4-5-6*7+8-9', '1+2+3+4+5+6+7+8+9', 
                    '1+2+3+4+5-6*7+8*9', '1+2+3+4-5*6+7*8+9', '1+2+3+4-5*6-7+8*9', '1+2+3-45+67+8+9', '1+2+3-4*5+6*7+8+9', 
                    '1+2+3-4*5-6+7*8+9', '1+2+3-4*5-6-7+8*9', '1+2+3*45-6-78-9', '1+2+3*4+5+6*7-8-9', '1+2+3*4*5+6-7-8-9', 
                    '1+2-34+5+6+7*8+9', '1+2-34+5+6-7+8*9', '1+2-34-5-6+78+9', '1+2-3+45+6-7-8+9', '1+2-3+45-6+7+8-9', 
                    '1+2-3+4*5+6*7-8-9', '1+2-3-45-6+7+89', '1+2-3-4-5*6+7+8*9', '1+2-3*4+5*6+7+8+9', '1+2-3*4-5+6*7+8+9', 
                    '1+2-3*4-5-6+7*8+9', '1+2-3*4-5-6-7+8*9', '1+2-3*4*5+6+7+89', '1+2*34-5*6+7+8-9', '1+2*3+4*5-6+7+8+9', 
                    '1+2*3+4*5*6+7-89', '1+2*3-4-5-6*7+89', '1+2*3*4+5*6+7-8-9', '1+2*3*4-5+6*7-8-9', '1+2*3*4*5+6+7-89', 
                    '1-23+45-67+89', '1-23+4-5+67-8+9', '1-23+4*5-6*7+89', '1-23-4+5+67+8-9', '1-23-4-5-6-7+89', 
                    '1-23*4+5+6*7+89', '1-2+3+45+6-7+8-9', '1-2+3+4-5*6+78-9', '1-2+3-45+6-7+89', '1-2+3-4*5-6+78-9', 
                    '1-2+3*4*5-6-7+8-9', '1-2-34+56+7+8+9', '1-2-34+5+6+78-9', '1-2-34-5+6+7+8*9', '1-2-3+45-6-7+8+9', 
                    '1-2-3+4-5+67-8-9', '1-2-3*4+5+6+7*8-9', '1-2-3*4-5-6+78-9', '1-2*34+5*6-7+89', '1-2*3+45-67+8*9', 
                    '1-2*3+4+56+7-8-9', '1-2*3+4+5+6*7+8-9', '1-2*3+4+5-6+7*8-9', '1-2*3+4*5+6+7+8+9', '1-2*3+4*5-6*7+8*9', 
                    '1-2*3-4+5*6+7+8+9', '1-2*3-4-5+6*7+8+9', '1-2*3-4-5-6+7*8+9', '1-2*3-4-5-6-7+8*9', '1-2*3*4+5-6+78-9', 
                    '1-2*3*4-5-6+7+8*9', '1*23+4*5-6+7-8+9', '1*23-4-56-7+89', '1*2+34+56-7*8+9', '1*2+34+5-6-7+8+9', 
                    '1*2+34-56+7*8+9', '1*2+34-56-7+8*9', '1*2+34-5+6+7-8+9', '1*2+3+45+67-8*9', '1*2+3+4+5*6+7+8-9', 
                    '1*2+3+4-5+6*7+8-9', '1*2+3+4-5-6+7*8-9', '1*2+3-45+6+7+8*9', '1*2+3*4-56+78+9', '1*2-34+5*6+7*8-9', 
                    '1*2-3+4-5-6*7+89', '1*2-3-4+56-7-8+9', '1*2-3-4*5+67+8-9', '1*2-3*4+5+67-8-9', '1*2*34+56-7-8*9', 
                    '1*2*34-5+6-7-8-9', '1*2*3+4+5+6+7+8+9', '1*2*3+4+5-6*7+8*9', '1*2*3+4-5*6+7*8+9', '1*2*3+4-5*6-7+8*9', 
                    '1*2*3-45+67+8+9', '1*2*3-4*5+6*7+8+9', '1*2*3-4*5-6+7*8+9', '1*2*3-4*5-6-7+8*9', '1*2*3*4+5+6-7+8+9', 
                    '1*2*3*4*5-6-78+9']
        # print(r)
        assert sorted(r) == sorted(expected)
        
    unit_test(Solution())
