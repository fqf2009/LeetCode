# The hash of a 0-indexed string s of length k, given integers p and m, 
# is computed using the following function:
#   hash(s, p, m) = (val(s[0]) * p^0 + val(s[1]) * p^1
#                     + ... + val(s[k-1]) * p^(k-1)) mod m.
# Where val(s[i]) represents the index of s[i] in the alphabet:
#   from val('a') = 1 to val('z') = 26.

# You are given a string s and the integers power, modulo, k, and hashValue. 
# Return sub, the first substring of s of length k such that 
# hash(sub, power, modulo) == hashValue.

# The test cases will be generated such that an answer always exists.

# rolling hash: https://en.wikipedia.org/wiki/Rolling_hash
# improvement - calculate from end to beginning, so we can keep doing the
#               modulo operation, and kept the result small
# reasoning: multiply does not affect modulo operation
#            suppose: x = a*m + b, i.e., x % m == b
#            then, x*p = a*m*p + b*p, i.e., x*p % m == b*p % m
class Solution:
    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:
        power %= modulo
        if power == 0:  # edge case, p^n % modulo is always 0
            for i in range(k-1, len(s)):
                if (ord(s[i-k+1]) - ord('a') + 1) % modulo == hashValue:
                    return s[i-k+1: i+1]

        # calculate hash for the last substring
        p, pk, h = 1, 1, 0
        for i in range(len(s) - k, len(s)):
            h = (h + (ord(s[i])-ord('a')+1)*p) % modulo
            if i == len(s)-1:
                pk = p
            p = p*power % modulo

        res = -1
        if h == hashValue:
            res = len(s) - k

        for i in reversed(range(k, len(s))):
            h = ((ord(s[i-k])-ord('a')+1) + power*(h + modulo - (ord(s[i])-ord('a')+1)*pk%modulo)) % modulo
            if h == hashValue:
                res = i-k

        if res == -1:
            return ''
        else:
            return s[res: res+k]


# moving window: Time Limit Exceeded
# - calculate hash for the first substring of len k, if hash matches, return.
# - remove old first char from hash, add a new char into hash:
#       new_hash = (old_hash - val(first_char)) / p + val(new_char)*p^(k-1)
# - there is one more way to slightly improve performance:
#       suppose, p = a*m + b, i.e. p % m == b
#                p^2 = (a^2*m^2 + 2ab*m + b^2), i.e., p^2 % m = b^2 % m
# - therefore,  if p % m == 0:
#                   hash(s[0:k]) = val(s[0]) % m
#               else:
#                   p = p % m, then follow algorithm above, with reduced calculation
class Solution1:
    def subStrHash(self, s: str, power: int, modulo: int, k: int, hashValue: int) -> str:
        p, h = 1, 0
        power %= modulo
        if power == 0:
            for i in range(k-1, len(s)):
                if (ord(s[i-k+1]) - ord('a') + 1) % modulo == hashValue:
                    return s[i-k+1: i+1]

        for i in range(k):
            h += (ord(s[i]) - ord('a') + 1) * p
            p *= power
        p //= power
        if h % modulo == hashValue:
            return s[0:k]

        for i in range(k, len(s)):
            h = (h - (ord(s[i-k]) - ord('a') + 1)) // power + (ord(s[i]) - ord('a') + 1) * p
            if h % modulo == hashValue:
                return s[i-k+1: i+1]

        return ''


if __name__ == '__main__':
    def unitTest(sol):
        r = sol.subStrHash(s="leetcode", power=7, modulo=20, k=2, hashValue=0)
        print(r)
        assert r == 'ee'

        r = sol.subStrHash(s="fbxzaad", power=31, modulo=100, k=3, hashValue=32)
        print(r)
        assert r == 'fbx'

        s="bzzrtrrpppigevriaooetwawtnfwddgdvoldxucsbyaufhygdxpnxupmvwbryzlgiuierypzqvwiywqlwiygyj"
        r = sol.subStrHash(s, power=76, modulo=4, k=60, hashValue=2)
        print(r)
        assert r == 'bzzrtrrpppigevriaooetwawtnfwddgdvoldxucsbyaufhygdxpnxupmvwbr'

        s=""
        power=518107341
        modulo=377181921
        k=20000
        hashValue=290573011
        r = sol.subStrHash(s, power, modulo, k, hashValue)
        print(r[:50], '...', r[k-50:k])
        assert len(r) == k


    unitTest(Solution())
    unitTest(Solution1())
